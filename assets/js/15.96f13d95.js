(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{417:function(a,t,s){a.exports=s.p+"assets/img/image-22.43d9c87b.png"},492:function(a,t,s){"use strict";s.r(t);var v=s(35),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"面试题记录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试题记录"}},[a._v("#")]),a._v(" 面试题记录")]),a._v(" "),v("p"),v("div",{staticClass:"table-of-contents-default"},[v("div",{staticClass:"toc-container-header"},[a._v("文章目录")]),v("ul",[v("li",[v("a",{attrs:{href:"#mic-2024面试真题"}},[a._v("Mic-2024面试真题")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-谈一谈mybatis里面的缓存机制-❓"}},[a._v("⚪ 谈一谈mybatis里面的缓存机制？❓")])])])]),v("li",[v("a",{attrs:{href:"#_25届秋招后端热题"}},[a._v("25届秋招后端热题")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-java中序列化和反序列化是什么❓"}},[a._v("⚪ Java中序列化和反序列化是什么❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是java中的不可变类❓"}},[a._v("⚪ 什么是Java中的不可变类❓")])]),v("li",[v("a",{attrs:{href:"#⚪-jdk8有那些新特性❓"}},[a._v("⚪ JDK8有那些新特性❓")])]),v("li",[v("a",{attrs:{href:"#⚪-jdk动态代理和cglib动态代理有什么区别❓"}},[a._v("⚪ JDK动态代理和CGLIB动态代理有什么区别❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是java的spi机制❓"}},[a._v("⚪ 什么是Java的SPI机制❓")])]),v("li",[v("a",{attrs:{href:"#⚪-java中有哪些集合类❓简单介绍一下"}},[a._v("⚪ Java中有哪些集合类❓简单介绍一下")])]),v("li",[v("a",{attrs:{href:"#⚪-java中hashmap的实现原理是什么❓"}},[a._v("⚪ Java中HashMap的实现原理是什么❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])])])]),v("li",[v("a",{attrs:{href:"#ai答题平台项目面试题"}},[a._v("AI答题平台项目面试题")]),v("ul",[v("li",[v("a",{attrs:{href:"#通用"}},[a._v("通用")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-请介绍一下本项目的完整业务流程❓"}},[a._v("⚪ 请介绍一下本项目的完整业务流程❓")])]),v("li",[v("a",{attrs:{href:"#⚪-为什么想做这样一个-ai-回答应用平台❓"}},[a._v("⚪ 为什么想做这样一个 AI 回答应用平台❓")])]),v("li",[v("a",{attrs:{href:"#⚪-为什么要开发-mbti-性格测试小程序-它和你的答题应用平台有什么联系❓"}},[a._v("⚪ 为什么要开发 MBTI 性格测试小程序？它和你的答题应用平台有什么联系❓")])]),v("li",[v("a",{attrs:{href:"#⚪-有哪些-ai-应用开发的技巧-尤其是如何编写出回答准确度较高的-prompt❓"}},[a._v("⚪ 有哪些 AI 应用开发的技巧？尤其是如何编写出回答准确度较高的 Prompt❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你有使用过-ai-工具来辅助编程么-都是如何帮你提高开发效率的❓"}},[a._v("⚪ 你有使用过 AI 工具来辅助编程么？都是如何帮你提高开发效率的❓")])]),v("li",[v("a",{attrs:{href:"#⚪-在开发过程中-你遇到过比较复杂的技术问题或挑战吗-如果有-请谈谈你是如何解决这些问题的❓"}},[a._v("⚪ 在开发过程中，你遇到过比较复杂的技术问题或挑战吗？如果有，请谈谈你是如何解决这些问题的❓")])])])]),v("li",[v("a",{attrs:{href:"#项目设计相关"}},[a._v("项目设计相关")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-请介绍整个系统后端的架构设计-有哪些模块以及各模块之间的关系❓"}},[a._v("⚪ 请介绍整个系统后端的架构设计，有哪些模块以及各模块之间的关系❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你在项目中是如何设计库表的❓可以从字段、索引、关联等方面回答"}},[a._v("⚪ 你在项目中是如何设计库表的❓可以从字段、索引、关联等方面回答")])]),v("li",[v("a",{attrs:{href:"#⚪-你是怎么快速开发项目后端的-如何避免重复编码❓"}},[a._v("⚪ 你是怎么快速开发项目后端的，如何避免重复编码❓")])])])]),v("li",[v("a",{attrs:{href:"#评分算法相关"}},[a._v("评分算法相关")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-为什么使用策略模式来封装不同的应用评分算法-它有哪些好处-具体如何实现❓"}},[a._v("⚪ 为什么使用策略模式来封装不同的应用评分算法？它有哪些好处？具体如何实现❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你的平台支持哪些类型的应用-支持哪些评分算法❓"}},[a._v("⚪ 你的平台支持哪些类型的应用？支持哪些评分算法❓")])])])]),v("li",[v("a",{attrs:{href:"#ai-模块相关题目"}},[a._v("AI 模块相关题目")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-你是怎么实现-ai-生成题目功能的❓"}},[a._v("⚪ 你是怎么实现 AI 生成题目功能的❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你是如何封装通用-ai-模块的-提供了哪些方法❓"}},[a._v("⚪ 你是如何封装通用 AI 模块的？提供了哪些方法❓")])]),v("li",[v("a",{attrs:{href:"#⚪-如何流式调用-ai-并实时获取到-ai-返回的内容❓"}},[a._v("⚪ 如何流式调用 AI 并实时获取到 AI 返回的内容❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你是如何实现-一道一道-流式生成题目的-用到了什么算法❓"}},[a._v("⚪ 你是如何实现 “一道一道” 流式生成题目的，用到了什么算法❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是-rxjava-为什么使用-rxjava-来处理流-它有什么优点❓"}},[a._v("⚪ 什么是 RxJava？为什么使用 RxJava 来处理流？它有什么优点❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是-sse-技术-它有什么优点和不足-适用于哪些场景❓"}},[a._v("⚪ 什么是 SSE 技术？它有什么优点和不足？适用于哪些场景❓")])]),v("li",[v("a",{attrs:{href:"#⚪-为什么用-sse-技术将生成的题目实时返回给前端-有没有其他实现方案❓"}},[a._v("⚪ 为什么用 SSE 技术将生成的题目实时返回给前端？有没有其他实现方案❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你是怎么实现-ai-评分功能的❓"}},[a._v("⚪ 你是怎么实现 AI 评分功能的❓")])]),v("li",[v("a",{attrs:{href:"#⚪-使用-ai-的过程中-有没有出现不稳定的情况-如果有-你又是如何处理的❓"}},[a._v("⚪ 使用 AI 的过程中，有没有出现不稳定的情况？如果有，你又是如何处理的❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你为什么要使用缓存来优化-ai-评分功能-这么做有什么好处❓"}},[a._v("⚪ 你为什么要使用缓存来优化 AI 评分功能？这么做有什么好处❓")])])])]),v("li",[v("a",{attrs:{href:"#缓存相关题目"}},[a._v("缓存相关题目")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-你了解哪些缓存技术-在项目中又是如何运用缓存的-比如怎么设计缓存❓"}},[a._v("⚪ 你了解哪些缓存技术？在项目中又是如何运用缓存的？比如怎么设计缓存❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是缓存击穿-你如何解决缓存击穿问题❓"}},[a._v("⚪ 什么是缓存击穿？你如何解决缓存击穿问题❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是-redisson-你在项目中如何使用-redisson-实现了分布式锁❓"}},[a._v("⚪ 什么是 Redisson？你在项目中如何使用 Redisson 实现了分布式锁❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是分布式锁-使用分布式锁时有哪些注意事项❓"}},[a._v("⚪ 什么是分布式锁？使用分布式锁时有哪些注意事项❓")])])])]),v("li",[v("a",{attrs:{href:"#幂等设计相关"}},[a._v("幂等设计相关")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-什么是幂等设计-你项目的哪个功能使用了幂等设计❓"}},[a._v("⚪ 什么是幂等设计？你项目的哪个功能使用了幂等设计❓")])]),v("li",[v("a",{attrs:{href:"#⚪-有哪些实现幂等设计的方法-你在项目中具体又是怎么实现的❓"}},[a._v("⚪ 有哪些实现幂等设计的方法？你在项目中具体又是怎么实现的❓")])]),v("li",[v("a",{attrs:{href:"#⚪-什么是雪花算法-为什么它能生成分布式全局唯一-id❓"}},[a._v("⚪ 什么是雪花算法？为什么它能生成分布式全局唯一 id❓")])])])]),v("li",[v("a",{attrs:{href:"#线程池隔离相关"}},[a._v("线程池隔离相关")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-什么是线程池隔离-你在项目中为什么要使用线程池隔离-有什么好处❓"}},[a._v("⚪ 什么是线程池隔离？你在项目中为什么要使用线程池隔离，有什么好处❓")])]),v("li",[v("a",{attrs:{href:"#⚪-你具体怎么实现线程池隔离-怎么设置线程池的参数❓"}},[a._v("⚪ 你具体怎么实现线程池隔离？怎么设置线程池的参数❓")])])])]),v("li",[v("a",{attrs:{href:"#统计分析模块相关"}},[a._v("统计分析模块相关")]),v("ul",[v("li",[v("a",{attrs:{href:"#⚪-你的项目支持哪些统计分析功能-后端如何查询出要统计分析的数据❓"}},[a._v("⚪ 你的项目支持哪些统计分析功能？后端如何查询出要统计分析的数据❓")])]),v("li",[v("a",{attrs:{href:"#⚪-❓"}},[a._v("⚪ ❓")])])])])])])])]),v("p"),a._v(" "),v("h2",{attrs:{id:"mic-2024面试真题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mic-2024面试真题"}},[a._v("#")]),a._v(" Mic-2024面试真题")]),a._v(" "),v("p",[a._v("题目来源：https://space.bilibili.com/3493119660132780/channel/collectiondetail?sid=3158777")]),a._v(" "),v("h4",{attrs:{id:"⚪-谈一谈mybatis里面的缓存机制-❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-谈一谈mybatis里面的缓存机制-❓"}},[a._v("#")]),a._v(" ⚪ 谈一谈mybatis里面的缓存机制？❓")]),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h2",{attrs:{id:"_25届秋招后端热题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_25届秋招后端热题"}},[a._v("#")]),a._v(" 25届秋招后端热题")]),a._v(" "),v("p",[a._v("题目来源：面试鸭")]),a._v(" "),v("h4",{attrs:{id:"⚪-java中序列化和反序列化是什么❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-java中序列化和反序列化是什么❓"}},[a._v("#")]),a._v(" ⚪ Java中序列化和反序列化是什么❓")]),a._v(" "),v("keyword",{attrs:{keywords:"数据传输和存储、writeOrdinaryObject、Jackson"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("简单来说，"),v("strong",[a._v("序列化")]),a._v(" 是将数据结构或对象转换成二进制字节流的过程，以便于传输存储或传输；而 "),v("strong",[a._v("反序列化")]),a._v(" 是将二进制字节流转换成数据结构或对象的过程。")]),a._v(" "),v("p",[a._v("对于 Java 而言，序列化的都是对象（也就是实例化后的类）。在使用时，我们可以将 Java 中的对象认为是“立体”的，当一些对象需要持久化或通过网络传输时，首先就需要将这些对象 “压扁” 操作，这种操作就认为是序列化操作；相反的，当读取或接收这些序列化数据时，就需要反序列化操作，将数据还原为“立体”的对象。")]),a._v(" "),v("p",[v("strong",[a._v("实际使用场景")]),a._v(" 有很多，比如前后端传送/响应数据、对象存储到数据库/从数据库读取对象、对象持久化到文件中等等。")]),a._v(" "),v("p",[a._v("另外多说一点：")]),a._v(" "),v("p",[a._v("在 Java 中，Java 为序列化提供了一个 "),v("code",[a._v("Serializable")]),a._v(" 接口，这个接口没有方法，只是用来标记一个类是否可以序列化。需要序列化的类继承该接口，并提供一个 "),v("code",[a._v("private static final long serialVersionUID")]),a._v(" 字段，该字段的值表示序列化版本号，用于标识序列化版本（验证序列化和反序列化对象ID是否一致）。")]),a._v(" "),v("p",[a._v("Java 序列化不包含 "),v("code",[a._v("static")]),a._v(" 静态变量和 "),v("code",[a._v("transient")]),a._v(" 修饰的变量。")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("📚参考")]),a._v("：")]),a._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/java/java_use.html#序列化-反序列化"}},[a._v("序列化&反序列化")])],1),a._v(" "),v("li",[v("a",{attrs:{href:"https://javaguide.cn/java/basis/serialization.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java 序列化详解"),v("OutboundLink")],1)]),a._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/io/java-io-basic-usage.html#%E5%BA%8F%E5%88%97%E5%8C%96-serializable-transient",target:"_blank",rel:"noopener noreferrer"}},[a._v("序列化 & Serializable & transient"),v("OutboundLink")],1)])])])]),v("h4",{attrs:{id:"⚪-什么是java中的不可变类❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是java中的不可变类❓"}},[a._v("#")]),a._v(" ⚪ 什么是Java中的不可变类❓")]),a._v(" "),v("keyword",{attrs:{keywords:"final、private"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("不可变类是指在初始化以后就不能修改的类。")]),a._v(" "),v("p",[a._v("比较经典的是 "),v("code",[a._v("String")]),a._v(" 类，当你创建一个 "),v("code",[a._v("String")]),a._v(" 对象之后，就不能修改它的内容了。因为无法被修改，因此像执行字符串相加 "),v("code",[a._v('s += "xxx"')]),a._v(" 这样的操作其实会返回一个新创建的 "),v("code",[a._v("String")]),a._v(" 对象，再让引用变量指向这个新创建的对象，原来的对象还是存在且没有被修改的。")]),a._v(" "),v("p",[a._v("不可变类的 "),v("strong",[a._v("好处")]),a._v(" 是安全，知晓这个对象不会被修改，所以可以放心使用，在多线程环境下也是线程安全的。带来的 "),v("strong",[a._v("缺点")]),a._v(" 就是频繁的修改会频繁创建新对象，导致浪费资源。")]),a._v(" "),v("p",[a._v("Java 中还有一些其他的不可变类，如：")]),a._v(" "),v("ul",[v("li",[v("code",[a._v("BigInteger")]),a._v(" 和 "),v("code",[a._v("BigDecimal")]),a._v(" 类")]),a._v(" "),v("li",[a._v("Java8 引入的日期时间类："),v("code",[a._v("LocalData")]),a._v(" 、 "),v("code",[a._v("LocalTime")]),a._v(" 、 "),v("code",[a._v("LocalDateTime")])]),a._v(" "),v("li",[a._v("枚举类 "),v("code",[a._v("Enum")]),a._v(" 也是不可变的，枚举常量在类加载的时间被创建，之后不能修改")])]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("扩展问题")]),a._v("：如何实现一个不可变类？")]),a._v(" "),v("p",[v("em",[a._v("参考 "),v("code",[a._v("String")]),a._v(" 类的设计")])]),a._v(" "),v("ul",[v("li",[a._v("将存放内容的变量设置为私有且 "),v("code",[a._v("final")]),a._v(" 的，此时可以保证变量引用不可变；")]),a._v(" "),v("li",[a._v("不对话暴露更改内容变量的操作，这样外部旧无法修改变量，保证变量引用内容不可变；")]),a._v(" "),v("li",[a._v("如果涉及到修改需求，就返回一个新对象作为结果，而不去修改原内容变量。")])])])]),v("h4",{attrs:{id:"⚪-jdk8有那些新特性❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-jdk8有那些新特性❓"}},[a._v("#")]),a._v(" ⚪ JDK8有那些新特性❓")]),a._v(" "),v("keyword",{attrs:{keywords:"Steam、Lambda表达式、函数式编程、CompletableFuture、元空间、接口默认&静态方法"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("JDK8 比较重要且经常使用的特性有：")]),a._v(" "),v("ul",[v("li",[a._v("方法区的实现由元空间代替永久代")]),a._v(" "),v("li",[a._v("引入了 Lambda 表达式，可以简化接口实现，使代码变得更加简洁紧凑。Lambda 表达式让 Java 能够支持简单的函数式编程，其最大的亮点就是函数可以作为参数传递到方法中")]),a._v(" "),v("li",[a._v("新增了 "),v("code",[a._v("Stream")]),a._v(" 流式接口， "),v("code",[a._v("Stream")]),a._v(" 流可以把源数据（如 "),v("code",[a._v("Collection")]),a._v(" 、 "),v("code",[a._v("Array")]),a._v(" 等）作为输入，然后像处理水流一样处理数据，最后得到想要的结果。\n"),v("ul",[v("li",[a._v("处理数据的方法有很多，如 "),v("code",[a._v("filter")]),a._v(" 、 "),v("code",[a._v("map")]),a._v(" 、 "),v("code",[a._v("reduce")]),a._v(" 、 "),v("code",[a._v("forEach")]),a._v(" 等")]),a._v(" "),v("li",[a._v("由于它的方法参数都是函数式接口类型，所以一般和 Lambda 配合使用")])])]),a._v(" "),v("li",[a._v("新增了接口默认方法、静态方法，解决了接口的修改与现有的实现不兼容的问题")]),a._v(" "),v("li",[a._v("引入了 "),v("code",[a._v("java.time")]),a._v(" 日期类，把日期和时间进行了分离 "),v("code",[a._v("LocalDate")]),a._v(" 、 "),v("code",[a._v("LocalTime")]),a._v(" 、 "),v("code",[a._v("LocalDateTime")]),a._v("，解决了 "),v("code",[a._v("Date")]),a._v(" 类的大部分痛点，如非线程安全、时区处理麻烦、各种格式化和时间计算繁琐。")]),a._v(" "),v("li",[a._v("新增了 "),v("code",[a._v("Optional")]),a._v(" 类，用于避免 "),v("code",[a._v("NPE")]),a._v(" 空指针异常")]),a._v(" "),v("li",[a._v("新增了 "),v("code",[a._v("CompletableFuture")]),a._v(" 类，可以帮助我们来做多线程异步任务编排")])]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("🧛扩展问题1")]),a._v("：在 Java 8 ，接口和抽象类有什么区别的？")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("🧛扩展问题2")]),a._v("：为什么 Java 8 移除了永久代，加了元空间？")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("🧛扩展问题3")]),a._v("：什么是 "),v("code",[a._v("Optional")]),a._v(" 类？")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("📚参考")]),a._v("：")]),a._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://javaguide.cn/java/new-features/java8-common-new-features.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8 新特性实战"),v("OutboundLink")],1)]),a._v(" "),v("li",[v("a",{attrs:{href:"https://javaguide.cn/java/concurrent/completablefuture-intro.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("CompletableFuture 详解"),v("OutboundLink")],1)])])])]),v("h4",{attrs:{id:"⚪-jdk动态代理和cglib动态代理有什么区别❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-jdk动态代理和cglib动态代理有什么区别❓"}},[a._v("#")]),a._v(" ⚪ JDK动态代理和CGLIB动态代理有什么区别❓")]),a._v(" "),v("keyword",{attrs:{keywords:"基于接口代理、InvocationHandler&Proxy、ASM字节码、继承代理、MethodInterceptor&Enhancer"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-什么是java的spi机制❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是java的spi机制❓"}},[a._v("#")]),a._v(" ⚪ 什么是Java的SPI机制❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("提供了一种服务发现机制，允许在程序外部动态指定具体实现。")]),a._v(" "),v("p",[a._v("它由接口调用方确定接口规则，然后由不同的厂商根据这个规则对这个接口进行实现，从而提供服务。")]),a._v(" "),v("p",[a._v("SPI机制允许服务提供者通过特定的配置文件将自己的实现注册到系统中，然后系统通过反射机制动态加载这些实现，而不需要修改原始框架的代码，从而实现了系统的解耦、提高了可扩展性。")])])]),v("h4",{attrs:{id:"⚪-java中有哪些集合类❓简单介绍一下"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-java中有哪些集合类❓简单介绍一下"}},[a._v("#")]),a._v(" ⚪ Java中有哪些集合类❓简单介绍一下")]),a._v(" "),v("keyword",{attrs:{keywords:"Collection、Map"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("Java中的集合类主要分为两大类：Collection 接口和 Map 接口，前者用于存储对象，后者用于存储键值对（key-value）。")])])]),v("h4",{attrs:{id:"⚪-java中hashmap的实现原理是什么❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-java中hashmap的实现原理是什么❓"}},[a._v("#")]),a._v(" ⚪ Java中HashMap的实现原理是什么❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("HashMap 是 Map 接口的实现之一，是基于数组 + 链表/红黑树 实现的哈希表数据结构，允许存储键值对，并通过键快速访问到对应的值。")]),a._v(" "),v("p",[a._v("查询&插入：HashMap 通过键的哈希值（首先经过扰动函数）计算出其存储的哈希槽，然后通过链表或红黑树进行查找。")]),a._v(" "),v("p",[a._v("在插入元素后，如果当前链表的长度超过 8 且容量大于等于 64，HashMap 会将当前链表结构改成红黑树结构。当红黑树节点小于6时，又会退化成链表。")]),a._v(" "),v("p",[a._v("动态扩容：HashMap 支持扩容，当容量达到阈值时，将数组扩容为原来的两倍，并重新计算每个元素的哈希槽。默认情况下，HashMap 的初始容量为 16，负载因子为 0.75。")])])]),v("h4",{attrs:{id:"⚪-❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-2"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-3"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-4"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-5"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-6"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-6"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h4",{attrs:{id:"⚪-❓-7"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-7"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})]),v("h2",{attrs:{id:"ai答题平台项目面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ai答题平台项目面试题"}},[a._v("#")]),a._v(" AI答题平台项目面试题")]),a._v(" "),v("p",[a._v("基于 Vue3 + SpringBoot + Redis + ChatGLM AI + RxJava + SSE的AI答题应用平台。用户可以基于AI快速制作并发布答题应用，在线答题并基于AI得到回答总结，还支持应用分享、资源管理、统计分析等功能。学习实战 React跨端小程序开发、Vue3 AI应用网站开发，后端分库分表、分布式锁、缓存、幂等设计、设计模式、RxJava响应式编程、SSE 实时推送、线程池隔离等。")]),a._v(" "),v("p",[v("strong",[a._v("简历写法：")]),a._v(" "),v("a",{attrs:{href:"https://www.laoyujianli.com/share/5zPhFC",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.laoyujianli.com/share/5zPhFC"),v("OutboundLink")],1)]),a._v(" "),v("p",[v("strong",[a._v("项目介绍：")])]),a._v(" "),v("p",[a._v("基于 Spring Boot + Redis + ChatGLM + RxJava + SSE 的 AI 答题应用平台。用户可基于 AI 快速生成题目并制作应用，经管理员审核后，可在线答题并基于多种评分算法或 AI 得到回答总结；管理员还可集中管理整站内容，并进行统计分析。")]),a._v(" "),v("p",[v("strong",[a._v("主要工作：")])]),a._v(" "),v("ol",[v("li",[a._v("库表设计：根据业务设计用户 / 应用 / 题目 / 评分结果 / 用户答题表。其中题目表采用 JSON 存储复杂的嵌套题目和选项，便于维护扩展，并通过给题目表添加 appId 索引提升检索性能。")]),a._v(" "),v("li",[a._v("评分模块：基于 "),v("strong",[a._v("策略模式")]),a._v(" 实现了多种用户回答评分算法（如统计得分、AI 评分等），全局执行器会扫描策略类上的 "),v("strong",[a._v("自定义注解")]),a._v(" 并选取策略，相较于 if else 提高了系统的可扩展性。")]),a._v(" "),v("li",[a._v("基于 RxJava 的操作符链式调用处理 AI 异步数据流，先通过 map 获取并处理字符串、filter 过滤空值、flatMap 映射串为单个字符，再通过 "),v("strong",[a._v("括号平衡算法")]),a._v(" 准确拼接出单道题目，使得逻辑简单清晰。")]),a._v(" "),v("li",[a._v("为防止用户多次提交重复答案，基于雪花算法为每次答题分配唯一 id，并通过数据库主键实现 "),v("strong",[a._v("幂等设计")]),a._v("，避免了重复的脏数据。")]),a._v(" "),v("li",[a._v("为应对用户答题数的增长，基于 Sharding JDBC 配置取模分片算法，根据应用 id 对用户答题记录分表，提高了单表查询性能和可扩展性。")])]),a._v(" "),v("p",[v("strong",[a._v("更多主要工作：")])]),a._v(" "),v("ul",[v("li",[a._v("库表设计：根据业务设计用户 / 应用 / 题目 / 评分结果 / 用户答题表。其中题目表采用 JSON 存储复杂的嵌套题目和选项，便于维护扩展，并通过给题目表添加 appId 索引提升检索性能。（感兴趣的同学可以自己测试一下性能的提高比例）")]),a._v(" "),v("li",[a._v("评分模块：基于 "),v("strong",[a._v("策略模式")]),a._v(" 实现了多种用户回答评分算法（如统计得分、AI 评分等），全局执行器会扫描策略类上的 "),v("strong",[a._v("自定义注解")]),a._v(" 并选取策略，相较于 if else 提高了系统的可扩展性。")]),a._v(" "),v("li",[a._v("基于 ChatGLM AI 封装了通用 AI 服务，并通过配置类自动读取 key 配置初始化 AI 客户端 Bean，便于全局使用。")]),a._v(" "),v("li",[a._v("基于腾讯云 COS 封装了通用文件管理服务，并通过配置类自动读取 key 配置初始化 COS 客户端 Bean，便于全局使用。")]),a._v(" "),v("li",[a._v("AI 生成题目：通过系统预设、少样本学习、任务拆解等手段优化 Prompt，让 AI 返回 JSON 题目内容，便于后端处理。")]),a._v(" "),v("li",[a._v("由于 AI 生成题目较慢，选用 ChatGLM 的流式 API 并通过 SSE 实时推送单道题目给前端，提高用户体验。1")]),a._v(" "),v("li",[a._v("基于 RxJava 的操作符链式调用处理 AI 异步数据流，先通过 map 获取并处理字符串、filter 过滤空值、flatMap 映射串为单个字符，再通过 "),v("strong",[a._v("括号平衡算法")]),a._v(" 准确拼接出单道题目，使得逻辑简单清晰。")]),a._v(" "),v("li",[a._v("为防止用户多次提交重复答案，基于雪花算法为每次答题分配唯一 id，并通过数据库主键实现 "),v("strong",[a._v("幂等设计")]),a._v("，避免了重复的脏数据。")]),a._v(" "),v("li",[a._v("由于相同答案的 AI 评分应该相同，使用 Caffeine 本地缓存答案 Hash 对应的 AI 评分结果，提高评分性能（10s 到 5ms）的同时大幅节约成本；并通过 Redisson 分布式锁解决缓存击穿问题。")]),a._v(" "),v("li",[a._v("为应对用户答题数的增长，基于 Sharding JDBC 配置取模分片算法，根据应用 id 对用户答题记录分表，提高了单表查询性能和可扩展性。（感兴趣的同学可以自己测试一下百万行数据的性能提高比例）")]),a._v(" "),v("li",[a._v("由于服务器资源有限，为会员创建核心线程数更大的 "),v("strong",[a._v("隔离线程池")]),a._v("，保证普通用户不会影响会员使用 AI 的体验。")]),a._v(" "),v("li",[a._v("统计分析：后端基于 MyBatis 注解自定义 SQL 实现热门应用和回答分布的统计，前端通过 ECharts 实现可视化。")]),a._v(" "),v("li",[a._v("基于自己开发的 Spring Boot 项目模板 + MyBatis X 插件 + 自定义代码生成器，快速生成各表基础业务代码。")]),a._v(" "),v("li",[a._v("使用 Knife4j + Swagger 自动生成后端接口文档，并通过编写 ApiOperation 等注解补充接口注释，避免了人工编写维护文档的麻烦。")])]),a._v(" "),v("h3",{attrs:{id:"通用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通用"}},[a._v("#")]),a._v(" 通用")]),a._v(" "),v("h4",{attrs:{id:"⚪-请介绍一下本项目的完整业务流程❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-请介绍一下本项目的完整业务流程❓"}},[a._v("#")]),a._v(" ⚪ 请介绍一下本项目的完整业务流程❓")]),a._v(" "),v("keyword",{attrs:{keywords:"用户角色、角色权限"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("本项目一共有三类用户角色，分别是：应用创建者、应用使用者、管理员。")]),a._v(" "),v("p",[a._v("应用创建者可以创建自定义应用，依次填写应用基本信息（名称描述等）、题目和选项、以及不同选项对应的评分结果。支持选择得分类和测评类这 2 种应用类型，支持选择自定义评分或 AI 评分这 2 种评分算法。")]),a._v(" "),v("p",[a._v("管理者负责审核应用创建者申请的自定义应用，含上下架应用和分析应用等管理功能。此外，管理员也可以针对本站的各类数据进行管理，比如用户的回答结果。")]),a._v(" "),v("p",[a._v("应用使用者可以在首页搜索和挑选应用进行答题，提交答案后得到评分结果。")]),a._v(" "),v("p",[a._v("注意，应用使用者也可以创建应用，应用创建者也可以参与应用答题，二者的身份不做明确的区分。")])])]),v("h4",{attrs:{id:"⚪-为什么想做这样一个-ai-回答应用平台❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-为什么想做这样一个-ai-回答应用平台❓"}},[a._v("#")]),a._v(" ⚪ 为什么想做这样一个 AI 回答应用平台❓")]),a._v(" "),v("keyword",{attrs:{keywords:"MBTI应用类结构简单、整合成平台、AI辅助"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("起初在网上看到 MBTI 性格测试应用还要收费，觉得开发这样一个答题应用并不难，就打算自己做一个。")]),a._v(" "),v("p",[a._v("但后面转念一想，既然能开发一个答题应用，为什么不能开发多个答题应用呢？毕竟题目结构和答题流程都是一致的，也不需要太多的额外开发成本，还能够动态维护题目数据，而不是在前端硬编码。")]),a._v(" "),v("p",[a._v("而且现在 AI 越来越流行，就想着用 AI 提高创建应用生成题目的效率、并且让 AI 给用户的回答评分从而提高回答的丰富度，不用自己去网上翻别人的答案了。")])])]),v("h4",{attrs:{id:"⚪-为什么要开发-mbti-性格测试小程序-它和你的答题应用平台有什么联系❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-为什么要开发-mbti-性格测试小程序-它和你的答题应用平台有什么联系❓"}},[a._v("#")]),a._v(" ⚪ 为什么要开发 MBTI 性格测试小程序？它和你的答题应用平台有什么联系❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("MBTI 小程序只是 AI 答题应用平台的一个实例 Demo，我做它主要有几个理由：")]),a._v(" "),v("ol",[v("li",[a._v("通过这个小项目确定了题目结构、跑通了答题功能的业务流程，为后续开发平台打下了基础，比如直接复用题目结构设计库表。")]),a._v(" "),v("li",[a._v("网上有很多 收费的 MBTI 性格测试，所以我选择做这个主题的小程序，比较实用有趣。")]),a._v(" "),v("li",[a._v("这个小程序开发比较简单，我也借此学习了跨端小程序的开发框架和小程序开发流程。")])]),a._v(" "),v("p",[a._v("后续还可以优化完善小程序，将前端硬编码题目数据改造为调用平台的后端接口根据 "),v("code",[a._v("appId")]),a._v(" 动态获取题目数据，从而让小程序支持切换多种不同的答题应用。")])])]),v("h4",{attrs:{id:"⚪-有哪些-ai-应用开发的技巧-尤其是如何编写出回答准确度较高的-prompt❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-有哪些-ai-应用开发的技巧-尤其是如何编写出回答准确度较高的-prompt❓"}},[a._v("#")]),a._v(" ⚪ 有哪些 AI 应用开发的技巧？尤其是如何编写出回答准确度较高的 Prompt❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("AI 应用开发的技巧：")]),a._v(" "),v("ul",[v("li",[a._v("明确定义问题和目标：明确想要利用 AI 去解决的问题，给 AI 模型什么输入、以及期望从 AI 模型中得到什么样的输出。")]),a._v(" "),v("li",[a._v("选择合适的模型：根据问题的特点和数据的属性选择合适的 AI 模型。如 OpenAI 的 GPT 系列通用性强、Google 的 BERT 系列在 NLP 任务中表现出色（问答、文本分类）等，确保模型能够胜任你的任务。")]),a._v(" "),v("li",[a._v("数据清洗和准备：对数据进行清洗和预处理，确保数据的质量，以提高模型的性能和准确度。还可以通过压缩字符串等方式降低使用 AI 模型的成本。")]),a._v(" "),v("li",[a._v("模型调优：尝试不同的 Prompt 和参数设置，并通过平台的 UI 或接口调用进行调试，以提高模型的性能和效果。")])]),a._v(" "),v("p",[a._v("如何编写准确度较高的 Prompt？技巧如下，也都是本项目中用到的：")]),a._v(" "),v("ul",[v("li",[a._v("定义 System Prompt 系统预设。比如：你是一位答题专家，我会给你 XX 信息，你要输出 XX")]),a._v(" "),v("li",[a._v("让 AI 进行角色扮演。比如：你是一位答题专家")]),a._v(" "),v("li",[a._v("使用分隔符标示不同的输入部分。比如：应用名称：鱼皮 \\n 应用描述：好吃")]),a._v(" "),v("li",[a._v('少样本学习。比如：示例结果为 {"value":"选项内容","key":"A"}')]),a._v(" "),v("li",[a._v("指定输出长度的示例。比如：不能超过 100 字")]),a._v(" "),v("li",[a._v("将复杂任务分解为简单的子任务。比如：你要先做 xx，再做 xx，最后做 xx")]),a._v(" "),v("li",[a._v('指定固定的输出格式。比如：严格按照 json 格式输出 {"value":"","key":""}')]),a._v(" "),v("li",[a._v("通过按顺序输入参数来节约空间。比如：我会给你依次提供应用名称、描述、类别")]),a._v(" "),v("li",[a._v("对于描述这种多行内容，可以通过特殊字符括起来，防止用户的输入干扰生成结果。比如：【【【应用描述】】】")])]),a._v(" "),v("blockquote",[v("p",[a._v("更详细的内容推荐阅读智谱 AI 官方提供的 Prompt 工程指南：https://open.bigmodel.cn/dev/howuse/prompt")])])])]),v("h4",{attrs:{id:"⚪-你有使用过-ai-工具来辅助编程么-都是如何帮你提高开发效率的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你有使用过-ai-工具来辅助编程么-都是如何帮你提高开发效率的❓"}},[a._v("#")]),a._v(" ⚪ 你有使用过 AI 工具来辅助编程么？都是如何帮你提高开发效率的❓")]),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("必须的，我使用的是国内的免费 AI 编程助手 CodeGeex，主要使用了下列功能：")]),a._v(" "),v("ul",[v("li",[a._v("自动生成单元测试")]),a._v(" "),v("li",[a._v("自动给代码补充注释")]),a._v(" "),v("li",[a._v("解释分析代码，帮助我理解一些类库的源码")]),a._v(" "),v("li",[a._v("示例数据生成，帮助我快速构造了一些模拟数据")]),a._v(" "),v("li",[a._v("代码补全，帮我提高了编码效率")]),a._v(" "),v("li",[a._v("代码生成，帮我生成一些简单的算法")])])])]),v("h4",{attrs:{id:"⚪-在开发过程中-你遇到过比较复杂的技术问题或挑战吗-如果有-请谈谈你是如何解决这些问题的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-在开发过程中-你遇到过比较复杂的技术问题或挑战吗-如果有-请谈谈你是如何解决这些问题的❓"}},[a._v("#")]),a._v(" ⚪ 在开发过程中，你遇到过比较复杂的技术问题或挑战吗？如果有，请谈谈你是如何解决这些问题的❓")]),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("可以从以上任意一道主观的面试题出发去讲，比如你是怎么实现 AI 生成题目功能并使用 SSE + RxJava 进行优化的？如果准确地根据实时字符串流拼接出一道完整的题目并立即返回给前端？如何一步步封装了通用的 AI 模块？发现有多种评分算法（if else）时，使用策略模式优化代码；发现用户可能同时提交多个重复回答时，采用幂等设计并通过缓存防止 AI 资源的浪费。")])])]),v("h3",{attrs:{id:"项目设计相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#项目设计相关"}},[a._v("#")]),a._v(" 项目设计相关")]),a._v(" "),v("h4",{attrs:{id:"⚪-请介绍整个系统后端的架构设计-有哪些模块以及各模块之间的关系❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-请介绍整个系统后端的架构设计-有哪些模块以及各模块之间的关系❓"}},[a._v("#")]),a._v(" ⚪ 请介绍整个系统后端的架构设计，有哪些模块以及各模块之间的关系❓")]),a._v(" "),v("keyword",{attrs:{keywords:"模块、模块联系、角色权限"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("整个系统的后端分为：")]),a._v(" "),v("ul",[v("li",[a._v("⟬用户模块⟭ ：提供登录、用户增删改查等管理功能")]),a._v(" "),v("li",[a._v("⟬应用模块⟭ ：提供应用增删改查、管理、分享等功能")]),a._v(" "),v("li",[a._v("⟬题目模块⟭ ：提供题目增删改查、管理等功能")]),a._v(" "),v("li",[a._v("⟬评分模块⟭ ：提供评分规则定制、答案评分功能")]),a._v(" "),v("li",[a._v("⟬回答模块⟭ ：提供回答记录查看、管理功能")]),a._v(" "),v("li",[a._v("⟬AI 模块⟭ ：提供 AI 创建题目、AI 智能评分功能")]),a._v(" "),v("li",[a._v("⟬统计分析模块⟭ ：提供热门应用排行分析、应用回答分布统计分析功能")])]),a._v(" "),v("p",[a._v("各模块之间的关系如下：")]),a._v(" "),v("ul",[v("li",[a._v("使用网站应用需要通过 ⟬用户模块⟭ 完成注册和登录")]),a._v(" "),v("li",[a._v("用户登录后，使用 ⟬应用模块⟭ 创建应用或者获取应用信息")]),a._v(" "),v("li",[a._v("创建应用需要调用 ⟬题目模块⟭ 生成题目或利用  ⟬AI 模块⟭ 生成题目")]),a._v(" "),v("li",[a._v("用户在答题页面根据应用 appId 调用 ⟬题目模块⟭ 据得到题目列表，提交答案后调用 ⟬评分模块⟭ ， ⟬评分模块⟭ 根据应用的类别执行不同的评分策略，比如自定义评分或调用  ⟬AI 模块⟭ 评分")]),a._v(" "),v("li",[a._v("⟬统计分析模块⟭ 调用 ⟬应用模块⟭ 或 ⟬回答模块⟭ 得到回答记录，通过自定义 SQL 统计分析记录数据")])]),a._v(" "),v("p",[a._v("网站用户分为普通用户 User 和管理员 Admin，普通用户可以搜索感兴趣的应用进行答题，也可以自行创建应用、管理自己应用的题目和评分列表，并查询回答记录。管理员可以管理（增删改查）所有用户、应用、题目、回答、以及根据这些数据进行统计分析。")])])]),v("h4",{attrs:{id:"⚪-你在项目中是如何设计库表的❓可以从字段、索引、关联等方面回答"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你在项目中是如何设计库表的❓可以从字段、索引、关联等方面回答"}},[a._v("#")]),a._v(" ⚪ 你在项目中是如何设计库表的❓可以从字段、索引、关联等方面回答")]),a._v(" "),v("keyword",{attrs:{keywords:"五张表、统一设置非业务属性、JSON、索引、冗余字段"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("项目中按照业务功能分析，一共设计了用户、应用、题目、评分结果、用户答题五张表。各表字段 "),v("strong",[a._v("统一设置")]),a._v(" 了 "),v("code",[a._v("createTime")]),a._v("、"),v("code",[a._v("updateTime")]),a._v("、"),v("code",[a._v("isDelete")]),a._v(" 必备非业务属性字段，便于维护。")]),a._v(" "),v("p",[a._v("其中 ⟦题目表⟧ 采用 JSON 存储复杂的嵌套题目和选项，便于维护扩展。")]),a._v(" "),v("p",[a._v("根据查询场景，部分表字段还进行了冗余，例如 ⟦用户答题表⟧ 需要展示评分结果的名称和描述，因此冗余了 ⟦评分结果表⟧ 的 "),v("code",[a._v("resultName")]),a._v(" 和 "),v("code",[a._v("resultDesc")]),a._v(" 等字段，避免用户查询答题记录时，还需要关联查询 ⟦评分记录表⟧ ，提升查询性能。")]),a._v(" "),v("p",[a._v("根据查询场景也做了一些索引设计，例如：")]),a._v(" "),v("ul",[v("li",[a._v("首页提供通过名称搜索应用功能，因此 ⟦应用表⟧ 的 "),v("code",[a._v("appName")]),a._v(" 建立了索引。")]),a._v(" "),v("li",[a._v("⟦题目表⟧ 的获取场景经常需要通过应用 "),v("code",[a._v("appId")]),a._v(" 得到题目，因此 ⟦题目表⟧ 的 "),v("code",[a._v("appId")]),a._v(" 字段也建立了索引。")])])])]),v("h4",{attrs:{id:"⚪-你是怎么快速开发项目后端的-如何避免重复编码❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你是怎么快速开发项目后端的-如何避免重复编码❓"}},[a._v("#")]),a._v(" ⚪ 你是怎么快速开发项目后端的，如何避免重复编码❓")]),a._v(" "),v("keyword",{attrs:{keywords:"通用模板、代码生成器、MyBatisX、FreeMarker、AI 工具"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("总结来说利用了：项目模板 + MyBatisX 插件 + 自定义代码生成器 + AI。")]),a._v(" "),v("ul",[v("li",[a._v("首先我根据以往的项目并结合他人的经验，搭建了一个 SpringBoot 后端项目初始模板，基于这个通用项目初始模板进行开发（相当于项目的 initializr），该模板内置了很多后端开发常用的能力，如全局异常处理器、通用响应对象包装、整合了数据库和 Redis 等，如果有数据存储需要，也可以快速开启 cos 存储服务。这个模板相比新建 SpringBoot 项目，可以更快搭建好初始 MVC 框架，避免了重复代码，这部分的代码我也是在 Github 上开源分享了。")]),a._v(" "),v("li",[a._v("在设计完库表后，可以利用 IDEA 的 MybatisX 插件生成对应的实体类、Mapper 等文件。")]),a._v(" "),v("li",[a._v("再利用自定义代码生成器，根据实体名称等信息生成了包含增删改查等通用功能的 Controller、Service 等文件。该生成器基于 FreeMarker 模板引擎实现。")]),a._v(" "),v("li",[a._v("现在 AI 工具能力已经很强了，因此在编码的过程中，也会借助 AI 插件生成或优化一些代码，比如测试数据。")])])])]),v("h3",{attrs:{id:"评分算法相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#评分算法相关"}},[a._v("#")]),a._v(" 评分算法相关")]),a._v(" "),v("h4",{attrs:{id:"⚪-为什么使用策略模式来封装不同的应用评分算法-它有哪些好处-具体如何实现❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-为什么使用策略模式来封装不同的应用评分算法-它有哪些好处-具体如何实现❓"}},[a._v("#")]),a._v(" ⚪ 为什么使用策略模式来封装不同的应用评分算法？它有哪些好处？具体如何实现❓")]),a._v(" "),v("keyword",{attrs:{keywords:"不同算法对应的就是不同策略、ScoringStrategy接口、ScoringStrategyConfig注解、ScoringStrategyExecutor驱动、开闭原则"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("因为使用不同评分算法进行判题的业务场景天然适配策略模式。")]),a._v(" "),v("p",[a._v("不同算法对应的就是不同策略，所以使用策略模式来封装了评分算法，便于维护和扩展。")]),a._v(" "),v("p",[a._v("具体实现方式：")]),a._v(" "),v("p",[a._v("1）定义 "),v("code",[a._v("ScoringStrategy")]),a._v(" 接口，约束了评分的入参和出参。"),v("br"),a._v("\n2）定义 "),v("code",[a._v("ScoringStrategyConfig")]),a._v(" 注解，一共有 "),v("code",[a._v("appType")]),a._v(" 和 "),v("code",[a._v("scoringStrategy")]),a._v(" 两个属性标识了策略对应的应用属性和评分类型。"),v("br"),a._v("\n3）每种评分算法都实现 "),v("code",[a._v("ScoringStrategy")]),a._v(" 接口，且标注对应的 "),v("code",[a._v("ScoringStrategyConfig")]),a._v(" 注解。"),v("br"),a._v("\n4）定义 "),v("code",[a._v("ScoringStrategyExecutor")]),a._v(" 方法作为驱动类，内部利用 Spring 注入了 "),v("code",[a._v("ScoringStrategy")]),a._v(" 实现类列表，得到所有评分算法。定义了 "),v("code",[a._v("execute")]),a._v(" 方法，遍历评分算法列表，通过反射获取策略实现类注解上的属性即可筛选出对应的评分算法。")]),a._v(" "),v("p",[a._v("通过使用注解 + 策略模式，在增加一个评分算法策略时，无需修改业务逻辑代码，业务会根据应用类型 "),v("code",[a._v("appType")]),a._v(" 自动选择对应的评分算法，这种模式比传统在 "),v("code",[a._v("if..elseif..")]),a._v(" 语句块增加一个分支，更加优雅自然，符合开闭原则。")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("🧛扩展问题")]),a._v("：你是怎么根据应用来选取要执行的评分算法的？是用 if else 么？")]),a._v(" "),v("p",[a._v("核心实现是注解。")]),a._v(" "),v("p",[a._v("一开始我想的是 "),v("code",[a._v("if else")]),a._v(" ，但是根据 开闭原则，后面要添加新的评分算法需要修改 "),v("code",[a._v("if else")]),a._v(" 的代码，因此我想到了 Spring 自动注入 + 自定义注解来实现自动选取评分算法。")]),a._v(" "),v("p",[a._v("具体来说，所有评分算法都实现了同一个策略接口，Spring 可以自动注入这些实现类，根据注解上定义的 "),v("code",[a._v("appType")]),a._v(" 和 "),v("code",[a._v("socringStrategy")]),a._v("，就可以从这些实现类中筛选出要执行的评分算法。")])])]),v("h4",{attrs:{id:"⚪-你的平台支持哪些类型的应用-支持哪些评分算法❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你的平台支持哪些类型的应用-支持哪些评分算法❓"}},[a._v("#")]),a._v(" ⚪ 你的平台支持哪些类型的应用？支持哪些评分算法❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("平台现在支持 "),v("strong",[a._v("得分类")]),a._v("应用 和 "),v("strong",[a._v("测评类")]),a._v(" 两种应用类型。")]),a._v(" "),v("p",[a._v("一共支持 3 种评分算法，分别是：")]),a._v(" "),v("ol",[v("li",[a._v("自定义计算测评类策略")]),a._v(" "),v("li",[a._v("自定义计算得分类策略")]),a._v(" "),v("li",[a._v("AI 分析测评类策略")])]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("🧛扩展问题")]),a._v("：如何实现测评类应用的评分算法？请详细讲解。")]),a._v(" "),v("ol",[v("li",[a._v("测评类每道题对应的答案都设置了属性，以 MBTI 为例，内向的答案对应 I 属性，外向的答案对应 E 属性。")]),a._v(" "),v("li",[a._v("根据用户选择的答案计算出对应属性总数量，例如 I 为 10 个、E 为 2 个、J 为 10 个、P 为 2 个，将其构建成一个属性得分 map，key 为属性值、value 为累计数量。")]),a._v(" "),v("li",[a._v("评分结果表的结果也设置了对应的属性，例如 ISTJ 包含了 I、S、T、J 这四个属性，ESTJ 则包含了 E、S、T、J 。对于每种评分结果，遍历属性集合，从上述 Map 结构中获取到属性对应的评分。比如 ISTJ 评分结果对应的得分为：10 (I) + 0 (S) + 0 (T) + 10 (J) = 20 分")]),a._v(" "),v("li",[a._v("遍历所有评分结果，使用上述算法计算得分，最终获取到得分最高的评分结果。")])]),a._v(" "),v("p",[a._v("通过定义 Map 的方式，拿空间换时间，减少了算法复杂度，提高了算法的执行效率。")])])]),v("h3",{attrs:{id:"ai-模块相关题目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ai-模块相关题目"}},[a._v("#")]),a._v(" AI 模块相关题目")]),a._v(" "),v("h4",{attrs:{id:"⚪-你是怎么实现-ai-生成题目功能的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你是怎么实现-ai-生成题目功能的❓"}},[a._v("#")]),a._v(" ⚪ 你是怎么实现 AI 生成题目功能的❓")]),a._v(" "),v("keyword",{attrs:{keywords:"Prompt编写、流式生成、SSE实时推送"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("首先的话，先选定一个比较好用且接口文档比较完善的 AI 平台，这里我选择了智谱AI。因为它的模型可以同时输入用户级 Prompt 和 系统级 Prompt，可以更好地调理 AI 输出，且赠送了免费的 Token 使用量，能够支撑当前项目开发。")]),a._v(" "),v("p",[a._v("接着按照智谱AI开放平台的接口文档引入相关的 Maven 依赖，这样就可以调用 AI 的服务。")]),a._v(" "),v("ul",[v("li",[a._v("AI 生成题目基础功能实现：通过编写 Prompt 实现让 AI 返回 JSON 格式的题目内容。并通过系统预设、少样本学习、任务拆解等技巧优化 Prompt、通过 AI 开放平台界面调试 Prompt，提高 AI 生成内容的完善度和准确度。")]),a._v(" "),v("li",[a._v("流式优化：由于 AI 生成题目较慢，选用 ChatGLM AI 的流式 API 并通过 SSE 实时推送 单道题目 给前端，提高用户体验。")]),a._v(" "),v("li",[a._v("具体实现：在 AI 平台没有完整返回单道题目对应的字符时，不应该返回给前端。为了拼接单道题目，我基于 RxJava 的操作符链式调用处理 AI 异步数据流，先通过 "),v("code",[a._v("map")]),a._v(" 获取并处理字符串（过滤特殊字符如 '\\n'）、"),v("code",[a._v("filter")]),a._v(" 过滤空值、"),v("code",[a._v("flatMap")]),a._v(" 映射字符串为单个字符，再通过 括号平衡算法 准确拼接出单道题目，使得逻辑简单清晰。")])]),a._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Configuration")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@ConfigurationProperties")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("prefix "),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ai"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Data")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AiConfig")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * apiKey，需要从开放平台获取\n     */")]),a._v("\n\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" apiKey"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClientV4")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClientV4")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClientV4"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Builder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("apiKey"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("build")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br"),v("span",{staticClass:"line-number"},[a._v("10")]),v("br"),v("span",{staticClass:"line-number"},[a._v("11")]),v("br"),v("span",{staticClass:"line-number"},[a._v("12")]),v("br"),v("span",{staticClass:"line-number"},[a._v("13")]),v("br"),v("span",{staticClass:"line-number"},[a._v("14")]),v("br"),v("span",{staticClass:"line-number"},[a._v("15")]),v("br"),v("span",{staticClass:"line-number"},[a._v("16")]),v("br")]),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br"),v("span",{staticClass:"line-number"},[a._v("10")]),v("br"),v("span",{staticClass:"line-number"},[a._v("11")]),v("br"),v("span",{staticClass:"line-number"},[a._v("12")]),v("br"),v("span",{staticClass:"line-number"},[a._v("13")]),v("br"),v("span",{staticClass:"line-number"},[a._v("14")]),v("br"),v("span",{staticClass:"line-number"},[a._v("15")]),v("br"),v("span",{staticClass:"line-number"},[a._v("16")]),v("br")])])])]),v("h4",{attrs:{id:"⚪-你是如何封装通用-ai-模块的-提供了哪些方法❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你是如何封装通用-ai-模块的-提供了哪些方法❓"}},[a._v("#")]),a._v(" ⚪ 你是如何封装通用 AI 模块的？提供了哪些方法❓")]),a._v(" "),v("keyword",{attrs:{keywords:"配置类、封装请求方法"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("ul",[v("li",[a._v("基于智谱 AI SDK 实现 AI 调用大模型的能力")]),a._v(" "),v("li",[a._v("通过创建配置类，项目启动时自动读取配置文件中的秘钥来初始化 AI 客户端实例")]),a._v(" "),v("li",[a._v("编写 Manager Bean 来调用 AI 客户端，提供了多种对 AI 的请求封装方法，并提供了统一的异常处理能力。")])]),a._v(" "),v("p",[a._v("比如随机性低的同步调用 AI 、随机性高的流式调用、简化消息传参的方法等。")])])]),v("h4",{attrs:{id:"⚪-如何流式调用-ai-并实时获取到-ai-返回的内容❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-如何流式调用-ai-并实时获取到-ai-返回的内容❓"}},[a._v("#")]),a._v(" ⚪ 如何流式调用 AI 并实时获取到 AI 返回的内容❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("ChatGLM 的 AI SDK 提供了流式调用的能力，我自主封装了 AI Manager 简化 AI 流式调用的传参，返回值是 "),v("code",[a._v("Flowable")]),a._v(" 响应式对象。我利用 "),v("strong",[a._v("RxJava 框架")]),a._v(" 来处理 AI 实时返回的 "),v("code",[a._v("Stream")]),a._v(" 流数据，将 AI 返回的字符串结果拼接成 “一道一道” 题目，并通过 SSE 实时推送给前端。")])])]),v("h4",{attrs:{id:"⚪-你是如何实现-一道一道-流式生成题目的-用到了什么算法❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你是如何实现-一道一道-流式生成题目的-用到了什么算法❓"}},[a._v("#")]),a._v(" ⚪ 你是如何实现 “一道一道” 流式生成题目的，用到了什么算法❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("首先流式调用 AI 接口，利用 RxJava 的操作符链式调用并处理 AI 实时返回的异步数据流。先通过 map 获取并处理字符串（过滤特殊字符如 '\\n'）、filter 过滤空值、flatMap 映射字符串为单个字符，再通过 括号平衡算法 准确拼接出单道题目，使得逻辑简单清晰。")]),a._v(" "),v("p",[a._v("括号平衡算法的解释：因为每道题目是 JSON 结构，左括号数一定等于右括号数。所以可以遍历当前字符串，用一个计数器统计括号数量，出现一次左括号则计数加一，出现一次右括号则计数减一，当计数为零，说明完整的一道题已返回完毕，此时通过 SSE 返回给前端。")])])]),v("h4",{attrs:{id:"⚪-什么是-rxjava-为什么使用-rxjava-来处理流-它有什么优点❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是-rxjava-为什么使用-rxjava-来处理流-它有什么优点❓"}},[a._v("#")]),a._v(" ⚪ 什么是 RxJava？为什么使用 RxJava 来处理流？它有什么优点❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目、RxJava"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("RxJava 是一个基于事件驱动的、利用可观测序列来实现异步编程的类库，是响应式编程在 Java 语言上的实现。")]),a._v(" "),v("p",[a._v("RxJava 可以使得异步编程更加简洁、灵活和易于维护：")]),a._v(" "),v("p",[a._v("1）它提供了响应式编程模型，使得代码更具可读性。比如 "),v("code",[a._v("doOnNext")]),a._v("、"),v("code",[a._v("doOnError")]),a._v("。")]),a._v(" "),v("p",[a._v("2）提供了丰富的操作符，简化异步操作、事件处理、数据转化等。比如 "),v("code",[a._v("map")]),a._v("、"),v("code",[a._v("filter")]),a._v("、"),v("code",[a._v("flatMap")]),a._v("。")]),a._v(" "),v("p",[a._v("3）简化线程管理，可以很容易地在不同线程中进行数据流的处理。比如 "),v("code",[a._v("observeOn")]),a._v("、"),v("code",[a._v("subscribeOn")]),a._v("。")]),a._v(" "),v("p",[a._v("它的一个核心应用场景就是 UI 场景，像 Android 开发都会用到 RxJava。UI 场景天然涉及到响应和事件这两点，比如我们在手机 app 上某个按钮，对应 app 就会弹出某个界面，点击按钮其实就是一个事件，那么弹出界面就是对应的响应。")])])]),v("h4",{attrs:{id:"⚪-什么是-sse-技术-它有什么优点和不足-适用于哪些场景❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是-sse-技术-它有什么优点和不足-适用于哪些场景❓"}},[a._v("#")]),a._v(" ⚪ 什么是 SSE 技术？它有什么优点和不足？适用于哪些场景❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目、服务器发送事件"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("SSE 服务器发送事件（Server-Sent Events）是一种用于 "),v("strong",[a._v("从服务器到客户端的 单向、实时 数据传输技术，基于 HTTP 协议实现")]),a._v("。")]),a._v(" "),v("p",[v("strong",[a._v("它有几个重要的特点：")])]),a._v(" "),v("ul",[v("li",[a._v("单向通信：SSE 只支持服务器向客户端的单向通信，客户端不能向服务器发送数据。")]),a._v(" "),v("li",[a._v("文本格式：SSE 使用 "),v("strong",[a._v("纯文本格式")]),a._v(" 传输数据，使用 HTTP 响应的 "),v("code",[a._v("text/event-stream")]),a._v(" MIME 类型。")]),a._v(" "),v("li",[a._v("保持连接：SSE 通过保持一个持久的 HTTP 连接，实现服务器向客户端推送更新，而不需要客户端频繁轮询。")]),a._v(" "),v("li",[a._v("自动重连：如果连接中断，浏览器会自动尝试重新连接，确保数据流的连续性。")])]),a._v(" "),v("p",[v("strong",[a._v("它的优点：")])]),a._v(" "),v("ul",[v("li",[a._v("简单易用：SSE 在实现上相对简单，无需复杂的配置和建立连接过程。")]),a._v(" "),v("li",[a._v("实时性：可以实现服务器向客户端的实时数据推送，使得客户端能够及时获得更新。")]),a._v(" "),v("li",[a._v("标准化：基于标准的 HTTP 协议，因此具有广泛的浏览器支持。")]),a._v(" "),v("li",[a._v("无需握手机制：与其他技术（如 WebSocket）相比，SSE 不需要握手机制，可以降低连接的延迟。")])]),a._v(" "),v("p",[v("strong",[a._v("不足：")])]),a._v(" "),v("ul",[v("li",[a._v("单向通信：SSE 是服务器向客户端的单向通信模式，客户端无法向服务器发送数据。")]),a._v(" "),v("li",[a._v("连接维持：SSE 需要保持持续连接，可能会造成服务器资源占用。")])]),a._v(" "),v("p",[v("strong",[a._v("适用场景：")])]),a._v(" "),v("ul",[v("li",[a._v("实时更新：股票价格、体育比赛比分、新闻更新等需要实时推送的应用。")]),a._v(" "),v("li",[a._v("日志监控：实时监控服务器日志或应用状态。")]),a._v(" "),v("li",[a._v("通知系统：向客户端推送系统通知或消息。")]),a._v(" "),v("li",[a._v("AI 对话：常见 AI 模型页面对话。")])])])]),v("h4",{attrs:{id:"⚪-为什么用-sse-技术将生成的题目实时返回给前端-有没有其他实现方案❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-为什么用-sse-技术将生成的题目实时返回给前端-有没有其他实现方案❓"}},[a._v("#")]),a._v(" ⚪ 为什么用 SSE 技术将生成的题目实时返回给前端？有没有其他实现方案❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("因为 SSE 具有如下优点：")]),a._v(" "),v("ul",[v("li",[a._v("简单易用：SSE 在实现上相对简单，无需复杂的配置和建立连接过程。")]),a._v(" "),v("li",[a._v("实时性：可以实现服务器向客户端的实时数据推送，使得客户端能够及时获得更新。")]),a._v(" "),v("li",[a._v("标准化：基于标准的 HTTP 协议，因此具有广泛的浏览器支持。")]),a._v(" "),v("li",[a._v("无需握手机制：与其他技术（如 WebSocket）相比，SSE 不需要握手机制，可以降低连接的延迟。")])]),a._v(" "),v("p",[v("strong",[a._v("其他实现方案：")])]),a._v(" "),v("ol",[v("li",[a._v("轮询（前端主动去要数据）")])]),a._v(" "),v("p",[a._v("前端间隔一定时间就调用后端提供的结果接口，比如 200ms 一次，后端处理一些结果就累加放置在缓存中。")]),a._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[a._v("WebSocket")])]),a._v(" "),v("p",[a._v("全双工协议，前端能实时推送数据给后端（或者从后端缓存拿数据），后端也可以实时推送数据给前端。")])])]),v("h4",{attrs:{id:"⚪-你是怎么实现-ai-评分功能的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你是怎么实现-ai-评分功能的❓"}},[a._v("#")]),a._v(" ⚪ 你是怎么实现 AI 评分功能的❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("ol",[v("li",[v("p",[a._v("ChatGLM 的 AI SDK 提供了流式调用的能力，我自主封装了 AI Manager 简化 AI 调用的传参和编码。")])]),a._v(" "),v("li",[v("p",[a._v("获取需要提供给 AI 的参数列表，包括应用信息、题目信息和用户答案。但是需要注意，题目数量可能会很多，如果将完整的题目结构（包括选项列表）输入给 AI，可能会超出最大 token 限制，所以可以进行优化，"),v("strong",[a._v("只保留用户选项对应的答案")]),a._v("。")]),a._v(" "),v("p",[a._v("示例结构如下：")]),a._v(" "),v("div",{staticClass:"language-json line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-json"}},[v("code",[v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[a._v('"appName"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MBTI 性格测试"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[a._v('"appDesc"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[a._v('"测试你的 MBTI 性格"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token property"}},[a._v('"question"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),v("span",{pre:!0,attrs:{class:"token property"}},[a._v('"title"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[a._v('"你喜欢和人交流"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),v("span",{pre:!0,attrs:{class:"token property"}},[a._v('"answer"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[a._v('"喜欢"')]),a._v("\n        "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br"),v("span",{staticClass:"line-number"},[a._v("10")]),v("br")]),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br"),v("span",{staticClass:"line-number"},[a._v("10")]),v("br")])])]),a._v(" "),v("li",[v("p",[a._v("利用上述参数来编写 Prompt，让 AI 返回 JSON 格式的评分结果名称和详细描述。")])]),a._v(" "),v("li",[v("p",[a._v("调用 AI 并保存评分结果到数据库中，返回给前端用户即可。")])])])])]),v("h4",{attrs:{id:"⚪-使用-ai-的过程中-有没有出现不稳定的情况-如果有-你又是如何处理的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-使用-ai-的过程中-有没有出现不稳定的情况-如果有-你又是如何处理的❓"}},[a._v("#")]),a._v(" ⚪ 使用 AI 的过程中，有没有出现不稳定的情况？如果有，你又是如何处理的❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("我遇到了几种不稳定的情况：")]),a._v(" "),v("ol",[v("li",[a._v("AI 没有按照要求返回 JSON 数据，有时额外返回了内容。我通过优化 Prompt（比如给 AI 示例样本结果）和对 AI 结果进行字符串截取处理，提高了稳定性。")]),a._v(" "),v("li",[a._v("由于网络原因导致调用 AI 平台失败。我通过 Guava Retrying 库实现了失败后的自动重试逻辑，且最大重试 3 次。")]),a._v(" "),v("li",[a._v("AI 调用余额不足。我通过编写定时任务定期查询剩余额度，如果额度不足，会提前通过邮件（或者其他方式）进行告警；并且如果用户使用时余额不足，会给一个友好提示。")])])])]),v("h4",{attrs:{id:"⚪-你为什么要使用缓存来优化-ai-评分功能-这么做有什么好处❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你为什么要使用缓存来优化-ai-评分功能-这么做有什么好处❓"}},[a._v("#")]),a._v(" ⚪ 你为什么要使用缓存来优化 AI 评分功能？这么做有什么好处❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("之前的 AI 评分功能存在 2 个问题：")]),a._v(" "),v("ol",[v("li",[a._v("AI 调用需要费用，如果用户对同样的题目做出同样的选择，理论会得到一样的解答，不需要每次都询问 AI，存在资源的浪费。")]),a._v(" "),v("li",[a._v("AI 评分的响应时间较长，效率有待提升。")])]),a._v(" "),v("p",[a._v("考虑到 “减少响应时长” 和 “数据复用”，我选择缓存技术来优化 AI 评分功能。由于项目前期采用单机部署，所以选用了成本相对较低的 Caffeine 本地缓存来缓存用户答案 Hash 对应的 AI 评分结果，提高评分性能（10s 到 5ms）的同时大幅节约成本；并通过 Redisson 分布式锁解决缓存击穿问题。")])])]),v("h3",{attrs:{id:"缓存相关题目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存相关题目"}},[a._v("#")]),a._v(" 缓存相关题目")]),a._v(" "),v("h4",{attrs:{id:"⚪-你了解哪些缓存技术-在项目中又是如何运用缓存的-比如怎么设计缓存❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你了解哪些缓存技术-在项目中又是如何运用缓存的-比如怎么设计缓存❓"}},[a._v("#")]),a._v(" ⚪ 你了解哪些缓存技术？在项目中又是如何运用缓存的？比如怎么设计缓存❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("有哪些缓存技术？")])]),a._v(" "),v("p",[a._v("缓存技术在项目中一般可以分为两种："),v("strong",[a._v("本地缓存")]),a._v(" 和 "),v("strong",[a._v("分布式缓存")]),a._v("。")]),a._v(" "),v("ul",[v("li",[a._v("本地缓存可以使用哈希表、Ehcache、Caffeine 等实现。")]),a._v(" "),v("li",[a._v("分布式缓存可以使用 Redis、Memcached 等实现。")])]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("项目中如何运用缓存？怎么设计？")])]),a._v(" "),v("p",[a._v("对于我的项目，由于不考虑分布式或扩容、且不要求持久化、不用保证多台机器缓存间的一致性，所以选择成本较低的本地缓存 Caffeine 来实现。")]),a._v(" "),v("p",[a._v("1）"),v("strong",[a._v("缓存 key 设计")])]),a._v(" "),v("p",[a._v("回归到需求“用户对同样的题目做出同样的选择，理论会得到一样的解答”")]),a._v(" "),v("p",[a._v("所以可以将应用 id 和用户的答案列表作为 key。")]),a._v(" "),v("p",[a._v("但答案列表可能很长，可以利用哈希算法（md5）来压缩 key，节省空间。")]),a._v(" "),v("p",[a._v("注意，如果是分布式缓存，还需要在 key 开头拼接业务前缀。此处我们可以单独为每个业务创建本地缓存，相互隔离，所以 key 可以简单一些。")]),a._v(" "),v("p",[a._v("2）"),v("strong",[a._v("缓存 value 设计")])]),a._v(" "),v("p",[a._v("缓存 AI 回答的结果，为了可读性可以存 JSON 结构，为了压缩空间可以存二进制等其他结构。")]),a._v(" "),v("p",[a._v("3）"),v("strong",[a._v("缓存过期时间设置")])]),a._v(" "),v("p",[v("strong",[a._v("必须设置缓存过期时间！")]),a._v(" 假设有 20 道题目，那么不同选择累计总次数一共是 2 的 20 次方，100 多万。")]),a._v(" "),v("p",[a._v("过期时间根据实际业务场景和缓存空间的大小、数据的一致性的要求设置，合适即可，此处设置为 1 天。")]),a._v(" "),v("p",[a._v("4）"),v("strong",[a._v("业务流程")])]),a._v(" "),v("ul",[v("li",[a._v("在 AI 回答前，哈希处理用户答题选择，得到摘要，拼接缓存 key。")]),a._v(" "),v("li",[a._v("通过摘要查找缓存，若命中则直接返回答题结果。")]),a._v(" "),v("li",[a._v("若缓存中未找到，则请求 AI 回答。")]),a._v(" "),v("li",[a._v("正确解析 AI 返回的 JSON 后，将其放置在缓存中。")])]),a._v(" "),v("p",[a._v("5）"),v("strong",[a._v("缓存相关问题的解决")])]),a._v(" "),v("p",[a._v("还需要注意缓存过期后的处理，防止产生缓存击穿、雪崩等问题。我在项目中通过 Redisson 分布式锁解决了缓存击穿。")])])]),v("h4",{attrs:{id:"⚪-什么是缓存击穿-你如何解决缓存击穿问题❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是缓存击穿-你如何解决缓存击穿问题❓"}},[a._v("#")]),a._v(" ⚪ 什么是缓存击穿？你如何解决缓存击穿问题❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("什么是缓存击穿？")])]),a._v(" "),v("p",[a._v("缓存击穿是指在高并发的情况下，针对一个不存在于缓存中但是访问量很高的 key，每次请求都要去数据库查询，导致数据库压力过大，性能下降的情况。当某个热点 key 的缓存过期时，大量请求同时访问这个 key，由于缓存为空，导致所有请求直接访问数据库，引起数据库压力骤增。")]),a._v(" "),v("p",[a._v("对于本项目，多个用户同时提交答案交给 AI 测评时，如果缓存过期，那么会有大量同时调用 AI 接口的并发请求，导致被 AI 服务器限制。")]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("如何解决缓存击穿问题？")])]),a._v(" "),v("p",[a._v("常见解决缓存击穿思路：")]),a._v(" "),v("ol",[v("li",[a._v("设置热点缓存数据永不过期，并且提前预热。")]),a._v(" "),v("li",[a._v("缓存不存在时，通过加锁让操作串行执行，并设置缓存。")]),a._v(" "),v("li",[a._v("定时更新热点数据的缓存。")])]),a._v(" "),v("p",[a._v("此处"),v("strong",[a._v("我选择第二种方案 —— 加锁")]),a._v("。如果服务部署在多个机器上，就必须要使用分布式锁。")]),a._v(" "),v("p",[a._v("分布式锁的实现细节很多，所以我直接使用 Redisson 实现分布式锁。Redisson 为 Redis 提供了多种数据结构的支持，并提供了线程安全的操作，简化了在 Java 中使用 Redis 的复杂度。")])])]),v("h4",{attrs:{id:"⚪-什么是-redisson-你在项目中如何使用-redisson-实现了分布式锁❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是-redisson-你在项目中如何使用-redisson-实现了分布式锁❓"}},[a._v("#")]),a._v(" ⚪ 什么是 Redisson？你在项目中如何使用 Redisson 实现了分布式锁❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("Redisson 是一个基于 Redis 的 Java 调用类库，提供了丰富的分布式对象和服务，其中包括分布式锁、分布式集合、分布式对象等功能。主要为了简化 Java 开发人员在分布式环境中使用 Redis 的复杂性，提供了易于使用的 API 以及各种分布式实现。")]),a._v(" "),v("p",[a._v("我在项目中实现分布式锁的方法：")]),a._v(" "),v("ol",[v("li",[a._v("编写配置类，从配置文件中读取 Redis 配置并初始化 Redisson 客户端 Bean。")]),a._v(" "),v("li",[a._v("通过 Redisson 客户端的 "),v("code",[a._v('getLock("myLock")')]),a._v(" 方法获取分布式锁。")]),a._v(" "),v("li",[a._v("通过 "),v("code",[a._v("tryLock")]),a._v(" 方法尝试获得锁，并设置抢锁等待时间（3 秒）和超时释放时间（15 秒）。")]),a._v(" "),v("li",[a._v("利用 "),v("code",[a._v("try...finally...")]),a._v(" 保证执行操作结束后，锁会被 当前线程 释放。")])])])]),v("h4",{attrs:{id:"⚪-什么是分布式锁-使用分布式锁时有哪些注意事项❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是分布式锁-使用分布式锁时有哪些注意事项❓"}},[a._v("#")]),a._v(" ⚪ 什么是分布式锁？使用分布式锁时有哪些注意事项❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("分布式锁是在分布式系统中用于控制对共享资源或临界区的访问的一种锁机制。它可以确保在多个节点或实例上同一时间只有一个进程能够获取锁，从而保证数据的一致性和避免并发访问下的数据竞争和冲突。")]),a._v(" "),v("p",[a._v("注意事项如下：")]),a._v(" "),v("ol",[v("li",[a._v("需要合理设置超时释放时间，避免造成死锁。")]),a._v(" "),v("li",[a._v("业务处理完毕后及时释放锁，防止业务阻塞。")]),a._v(" "),v("li",[a._v("必须由当前线程释放锁，不能释放其他线程加的锁，防止业务执行受到影响。")]),a._v(" "),v("li",[a._v("合理设置抢锁等待时间，避免长时间无效等待。")]),a._v(" "),v("li",[a._v("可以利用看门狗机制实现锁的续期，防止由于业务处理时间大于锁超时释放时间，导致一把锁被多个线程拥有，从而出现错误。")])])])]),v("h3",{attrs:{id:"幂等设计相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#幂等设计相关"}},[a._v("#")]),a._v(" 幂等设计相关")]),a._v(" "),v("h4",{attrs:{id:"⚪-什么是幂等设计-你项目的哪个功能使用了幂等设计❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是幂等设计-你项目的哪个功能使用了幂等设计❓"}},[a._v("#")]),a._v(" ⚪ 什么是幂等设计？你项目的哪个功能使用了幂等设计❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("幂等设计在编程场景指的是：使用相同参数多次调用同一接口，产生的结果或影响和单次调用是一致的。")]),a._v(" "),v("p",[a._v("为防止用户多次提交重复答案，基于雪花算法为每次答题分配唯一 id，并通过数据库主键实现 幂等设计，避免了重复的脏数据。")])])]),v("h4",{attrs:{id:"⚪-有哪些实现幂等设计的方法-你在项目中具体又是怎么实现的❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-有哪些实现幂等设计的方法-你在项目中具体又是怎么实现的❓"}},[a._v("#")]),a._v(" ⚪ 有哪些实现幂等设计的方法？你在项目中具体又是怎么实现的❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("有 4 种常用的幂等设计方法：")]),a._v(" "),v("ol",[v("li",[a._v("利用数据库唯一索引的一致性保证幂等性")]),a._v(" "),v("li",[a._v("利用乐观锁在某些场景下也能实现幂等性")]),a._v(" "),v("li",[a._v("一些天然的幂等操作，比如 delete 操作（因为删除一次和多次都是一样的）")]),a._v(" "),v("li",[a._v("利用分布式锁防止并发，通过逻辑判断可以实现幂等性")])]),a._v(" "),v("p",[a._v("在项目中为防止用户多次提交重复答案，后端基于雪花算法为每次答题分配唯一 id，并且在用户进入答题页时返回给前端。用户提交答案时会携带该 id，利用数据库主键可以防止重复 id 数据的插入，如果 id 重复，会抛出 "),v("code",[a._v("DuplicateKeyException")]),a._v(" 异常，直接忽略即可。这样就避免了重复的脏数据。")])])]),v("h4",{attrs:{id:"⚪-什么是雪花算法-为什么它能生成分布式全局唯一-id❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是雪花算法-为什么它能生成分布式全局唯一-id❓"}},[a._v("#")]),a._v(" ⚪ 什么是雪花算法？为什么它能生成分布式全局唯一 id❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("雪花算法？")])]),a._v(" "),v("p",[a._v("雪花算法（Snowflake Algorithm）是一种用来生成分布式系统中全局唯一的 ID 的算法。由 Twitter 开发的，用于满足分布式系统中生成唯一 ID 的需求。")]),a._v(" "),v("p",[a._v("雪花算法生成的唯一 ID 通常是一个 64 位的整数，按照以下结构组成：")]),a._v(" "),v("ul",[v("li",[a._v("首位符号位（固定为 0）: 符号位始终为 0，保证生成的是正整数。")]),a._v(" "),v("li",[a._v("41 位时间戳（毫秒级）: 表示生成 ID 的时间戳，可以支持约 69 年的时间范围。")]),a._v(" "),v("li",[a._v("10 位机器标识（分布式部署时的机器 ID）: 可以支持 1024 台不同的机器。")]),a._v(" "),v("li",[a._v("12 位序列号（同一机器同一毫秒内的自增序列）: 表示同一台机器同一毫秒内生成的不同 ID 的序列号。")])]),a._v(" "),v("p",[a._v("雪花算法原理图如下：")]),a._v(" "),v("p",[v("img",{attrs:{src:s(417),alt:"雪花算法"}})]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("雪花算法能生成分布式全局唯一 ID 的原因")])]),a._v(" "),v("ul",[v("li",[a._v("雪花算法允许在同一毫秒内生成多个不同的 ID，通过序列号的自增保证在高并发情况下生成的 ID 唯一性。")]),a._v(" "),v("li",[a._v("通过机器部分的标识符保证了在不同的机器上生成 ID 时不会发生冲突。")]),a._v(" "),v("li",[a._v("利用时间戳部分的信息，确保生成的 ID 按时间递增，可以方便地对 ID 进行排序和分析。")])])])]),v("h3",{attrs:{id:"线程池隔离相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程池隔离相关"}},[a._v("#")]),a._v(" 线程池隔离相关")]),a._v(" "),v("h4",{attrs:{id:"⚪-什么是线程池隔离-你在项目中为什么要使用线程池隔离-有什么好处❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-什么是线程池隔离-你在项目中为什么要使用线程池隔离-有什么好处❓"}},[a._v("#")]),a._v(" ⚪ 什么是线程池隔离？你在项目中为什么要使用线程池隔离，有什么好处❓")]),a._v(" "),v("keyword",{attrs:{keywords:"背诵类题目"}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("什么是线程池隔离？")])]),a._v(" "),v("p",[v("strong",[a._v("线程池隔离")]),a._v("是一种通过为不同的任务类型或者不同的资源分配独立的线程池来隔离不同类型的任务或资源的执行的机制。这种机制可以"),v("strong",[a._v("有效地控制各种任务之间的相互影响，提高系统的稳定性和可靠性")]),a._v("。")]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("项目中为什么要使用线程池隔离，有什么好处？")])]),a._v(" "),v("p",[a._v("如果所有业务操作都使用一个线程池，最大的问题就是相互影响。")]),a._v(" "),v("p",[a._v("所以，在一些业务敏感的场景，需要隔离线程池，它有以下几点好处：")]),a._v(" "),v("ol",[v("li",[a._v("故障隔离，缩小事故范围。")]),a._v(" "),v("li",[a._v("资源隔离，防止业务之间抢占资源。同时支持更精细化地管理资源，比如不重要的场景给小一点的线程池，核心场景配置大线程池。")]),a._v(" "),v("li",[a._v("性能优化，一些业务场景的任务是 CPU 密集型，一些是 I/O 密集型，不同任务类型需要配置不同的线程池。")])]),a._v(" "),v("p",[a._v("回到本项目，因为服务器资源有限，对于 AI 批量生成题目功能，我为会员创建了 "),v("strong",[a._v("核心线程数更大")]),a._v(" 的隔离线程池，尽量保证普通用户的操作不会影响到会员使用 AI 的体验。")])])]),v("h4",{attrs:{id:"⚪-你具体怎么实现线程池隔离-怎么设置线程池的参数❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你具体怎么实现线程池隔离-怎么设置线程池的参数❓"}},[a._v("#")]),a._v(" ⚪ 你具体怎么实现线程池隔离？怎么设置线程池的参数❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("怎么实现线程池隔离？")])]),a._v(" "),v("p",[a._v("我针对普通用户和会员用户（管理员）定制了两个不同的线程池，使用 RxJava 处理响应式数据流时，可以通过 "),v("code",[a._v("observeOn(scheduler)")]),a._v(" 方法，根据用户的身份指定使用的线程池。")]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("怎么设置线程池的参数？")])]),a._v(" "),v("ul",[v("li",[a._v("普通用户线程池：核心线程数和最大线程数都为 1，即单线程，任务队列长度为 1000，超过则拒绝提交。这样可以有效限制普通用户调用 AI 的频率。")]),a._v(" "),v("li",[a._v("会员用户线程池：核心线程数为 10，最大线程数为 20，任务队列长度为 5000，超过则拒绝提交。即允许更多会员同时使用 AI。")])]),a._v(" "),v("p",[a._v("我还通过编写单元测试，验证了线程池隔离的有效性。")])])]),v("h3",{attrs:{id:"统计分析模块相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#统计分析模块相关"}},[a._v("#")]),a._v(" 统计分析模块相关")]),a._v(" "),v("h4",{attrs:{id:"⚪-你的项目支持哪些统计分析功能-后端如何查询出要统计分析的数据❓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-你的项目支持哪些统计分析功能-后端如何查询出要统计分析的数据❓"}},[a._v("#")]),a._v(" ⚪ 你的项目支持哪些统计分析功能？后端如何查询出要统计分析的数据❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"},[v("p",[a._v("1️⃣"),v("strong",[a._v("项目支持哪些统计分析功能？")])]),a._v(" "),v("p",[a._v("支持 2 种统计分析功能：热门应用排行统计和应用回答分布统计。")]),a._v(" "),v("p",[a._v("作用分别是：")]),a._v(" "),v("ul",[v("li",[a._v("热门应用排行统计：在 AI 答题应用平台中，我们可以分析哪个 App 用户使用的最多，后期功能迭代时，可根据统计结果，把热门的应用排在首页的靠前位置，并且添加缓存以提升访问速度。")]),a._v(" "),v("li",[a._v("应用回答分布统计：根据用户测评结果的分布情况，可优先对群体大的用户进行定制化开发或广告投放，吸引更多用户。")])]),a._v(" "),v("p",[a._v("2️⃣"),v("strong",[a._v("后端如何查询出要统计分析的数据？")])]),a._v(" "),v("p",[a._v("编写 SQL 语句，通过 group by 聚合语法实现对数据的分组统计。在 Java 程序中，通过 MyBatis 的自定义 SQL 注解实现（如 @Select）复杂 SQL 语句的执行。")]),a._v(" "),v("p",[a._v("后端查出数据后，前端可以通过 ECharts 实现可视化。")])])]),v("h4",{attrs:{id:"⚪-❓-8"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚪-❓-8"}},[a._v("#")]),a._v(" ⚪ ❓")]),a._v(" "),v("keyword",{attrs:{keywords:""}}),a._v(" "),v("div",{staticClass:"zenbu-answer"},[v("p",{staticClass:"zenbu-answer-title"},[a._v("🙋🏻‍♂️ 答：")]),v("div",{staticClass:"zenbu-answer-context"})])],1)}),[],!1,null,null,null);t.default=e.exports}}]);