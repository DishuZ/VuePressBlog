(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{486:function(s,a,v){"use strict";v.r(a);var t=v(35),_=Object(t.a)({},(function(){var s=this,a=s.$createElement,v=s._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("h1",{attrs:{id:"反射"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),v("p"),v("div",{staticClass:"table-of-contents-default"},[v("div",{staticClass:"toc-container-header"},[s._v("文章目录")]),v("ul",[v("li",[v("a",{attrs:{href:"#反射基础"}},[s._v("反射基础")]),v("ul",[v("li",[v("a",{attrs:{href:"#概念"}},[s._v("概念")])]),v("li",[v("a",{attrs:{href:"#使用"}},[s._v("使用")]),v("ul",[v("li",[v("a",{attrs:{href:"#class-类"}},[s._v("Class 类")]),v("ul",[v("li",[v("a",{attrs:{href:"#「-class-文件」-「-class-类」-「-class-对象」"}},[s._v("「.class文件」&「Class类」&「Class对象」")])]),v("li",[v("a",{attrs:{href:"#「-class-类」的方法"}},[s._v("「Class类」的方法")])]),v("li",[v("a",{attrs:{href:"#「-class-对象」的获取"}},[s._v("「Class对象」的获取")])])])]),v("li",[v("a",{attrs:{href:"#java-lang-reflect-类库"}},[s._v("java.lang.reflect 类库")]),v("ul",[v("li",[v("a",{attrs:{href:"#constructor-类"}},[s._v("Constructor 类")])]),v("li",[v("a",{attrs:{href:"#field-类"}},[s._v("Field 类")])]),v("li",[v("a",{attrs:{href:"#method-类"}},[s._v("Method 类")])])])]),v("li",[v("a",{attrs:{href:"#反射机制的执行流程"}},[s._v("反射机制的执行流程")])])])])])])])]),v("p"),s._v(" "),v("h2",{attrs:{id:"反射基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射基础"}},[s._v("#")]),s._v(" 反射基础")]),s._v(" "),v("h3",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),v("h3",{attrs:{id:"使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),v("p",[s._v("在Java中，"),v("strong",[v("code",[s._v("Class")]),s._v(" 类")]),s._v(" 与 "),v("strong",[v("code",[s._v("java.lang.reflect")]),s._v(" 类库")]),s._v(" 一起对反射技术进行了全力的支持。")]),s._v(" "),v("h4",{attrs:{id:"class-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class-类"}},[s._v("#")]),s._v(" "),v("code",[s._v("Class")]),s._v(" 类")]),s._v(" "),v("p",[v("code",[s._v("Class")]),s._v(" 是一个实实在在的类，存在于JDK的 "),v("code",[s._v("java.lang")]),s._v(" 包中。「"),v("code",[s._v("Class")]),s._v("类」的实例表示Java应用运行时的类或接口，换句话说，在应用运行时，每一个Java类都在JVM中表现为一个对应的 「"),v("code",[s._v("Class")]),s._v("对象」。")]),s._v(" "),v("p",[s._v("所以，需要注意：")]),s._v(" "),v("ul",[v("li",[v("code",[s._v("Class")]),s._v(" 是一个类，与 "),v("code",[s._v("class")]),s._v(" 关键字是不一样的")]),s._v(" "),v("li",[s._v("每个通过关键字 "),v("code",[s._v("class")]),s._v(" 标识的类，在JVM内存中都有且只有一个与之对应的「"),v("code",[s._v("Class")]),s._v("对象」来描述其类型信息。无论创建多少个实例对象，其依据的都是用一个「"),v("code",[s._v("Class")]),s._v("对象」")]),s._v(" "),v("li",[s._v("Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要(关于反射稍后分析)")]),s._v(" "),v("li",[s._v("「"),v("code",[s._v(".class")]),s._v("文件」是「"),v("code",[s._v("Class")]),s._v("对象」在磁盘上的表示，而「"),v("code",[s._v("Class")]),s._v("对象」则是「"),v("code",[s._v(".class")]),s._v("文件」在内存中的运行时表示")])]),s._v(" "),v("h5",{attrs:{id:"「-class文件」-「class类」-「class对象」"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#「-class文件」-「class类」-「class对象」"}},[s._v("#")]),s._v(" 「"),v("code",[s._v(".class")]),s._v("文件」&「"),v("code",[s._v("Class")]),s._v("类」&「"),v("code",[s._v("Class")]),s._v("对象」")]),s._v(" "),v("h5",{attrs:{id:"「class类」的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#「class类」的方法"}},[s._v("#")]),s._v(" 「"),v("code",[s._v("Class")]),s._v("类」的方法")]),s._v(" "),v("table",[v("thead",[v("tr",[v("th",[s._v("方法名")]),s._v(" "),v("th",[s._v("说明")])])]),s._v(" "),v("tbody",[v("tr",[v("td",[v("code",[s._v("static .. forName()")])]),s._v(" "),v("td")]),s._v(" "),v("tr",[v("td",[v("code",[s._v("getClass()")])]),s._v(" "),v("td",[s._v("获取Class对象的一个引用，返回表示该对象的实际类型的Class引用")])]),s._v(" "),v("tr",[v("td",[v("code",[s._v("getName()")])]),s._v(" "),v("td",[s._v("获取全限定的类名(包括包名)，即类的完整名字")])]),s._v(" "),v("tr",[v("td",[v("code",[s._v("isInterface()")])]),s._v(" "),v("td",[s._v("判断Class对象是否是表示一个接口")])]),s._v(" "),v("tr",[v("td",[v("code",[s._v("newInstance()")])]),s._v(" "),v("td",[s._v("返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。")])]),s._v(" "),v("tr",[v("td",[v("code",[s._v("getFields()")])]),s._v(" "),v("td",[s._v("获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有 "),v("code",[s._v("getMethods")]),s._v(" 和 "),v("code",[s._v("getConstructors")]),s._v("。")])])])]),s._v(" "),v("h5",{attrs:{id:"「class对象」的获取"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#「class对象」的获取"}},[s._v("#")]),s._v(" 「"),v("code",[s._v("Class")]),s._v("对象」的获取")]),s._v(" "),v("p",[s._v("在类加载的时候，JVM会根据「"),v("code",[s._v(".class")]),s._v("文件」的内容，在JVM的内存中创建一个对应的「"),v("code",[s._v("Class")]),s._v("对象」，这个「"),v("code",[s._v("Class")]),s._v("对象」是该类的运行时表示。它包含了该类的所有信息，比如类名、父类、实现的接口、字段、方法等。")]),s._v(" "),v("p",[s._v("反射机制是通过获取和操作这些「"),v("code",[s._v("Class")]),s._v("对象」来完成的，从而实现了对Java类的动态访问和操作。")]),s._v(" "),v("p",[s._v("所以，"),v("strong",[s._v("反射的第一步")]),s._v(" 是获取到这些「"),v("code",[s._v("Class")]),s._v("对象」，获取「"),v("code",[s._v("Class")]),s._v("对象」的方式的有四种：")]),s._v(" "),v("ol",[v("li",[s._v("知道具体类的情况下可以使用 "),v("code",[s._v("类名.class")])]),s._v(" "),v("li",[s._v("通过 "),v("code",[s._v("Class.forName(全限定类名)")]),s._v(" 传入类的全路径获取")]),s._v(" "),v("li",[s._v("通过对象实例 "),v("code",[s._v("实例.getClass()")]),s._v(" 获取")]),s._v(" "),v("li",[s._v("通过类加载器 "),v("code",[s._v("xxxClassLoader.loadClass()")]),s._v(" 传入类路径获取")])]),s._v(" "),v("h4",{attrs:{id:"java-lang-reflect-类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-类库"}},[s._v("#")]),s._v(" "),v("code",[s._v("java.lang.reflect")]),s._v(" 类库")]),s._v(" "),v("p",[s._v("在 "),v("code",[s._v("java.lang.reflect")]),s._v(" 反射包中，我们常用的类主要有：")]),s._v(" "),v("ul",[v("li",[v("strong",[v("code",[s._v("Constructor")]),s._v(" 类")]),s._v(" —— 表示的是 Class 对象所表示的"),v("strong",[s._v("类的构造方法")]),s._v("，利用它可以在运行时动态创建对象")]),s._v(" "),v("li",[v("strong",[v("code",[s._v("Field")])]),s._v(" —— 表示 Class 对象所表示的"),v("strong",[s._v("类的成员变量")]),s._v("，通过它可以在运行时动态修改成员变量的属性值（包含 "),v("code",[s._v("private")]),s._v(" 方法）")]),s._v(" "),v("li",[v("strong",[v("code",[s._v("Method")])]),s._v(" —— 表示 Class 对象所表示的"),v("strong",[s._v("类的成员方法")]),s._v("，通过它可以动态调用对象的方法（包含 "),v("code",[s._v("private")]),s._v(" 方法），")])]),s._v(" "),v("h5",{attrs:{id:"constructor-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#constructor-类"}},[s._v("#")]),s._v(" "),v("code",[s._v("Constructor")]),s._v(" 类")]),s._v(" "),v("p",[v("code",[s._v("Constructor")]),s._v(" 类反映的是「"),v("code",[s._v("Class")]),s._v("对象」所表示的类的构造方法。")]),s._v(" "),v("h5",{attrs:{id:"field-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#field-类"}},[s._v("#")]),s._v(" "),v("code",[s._v("Field")]),s._v(" 类")]),s._v(" "),v("p",[v("code",[s._v("Field")]),s._v(" 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。")]),s._v(" "),v("h5",{attrs:{id:"method-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#method-类"}},[s._v("#")]),s._v(" "),v("code",[s._v("Method")]),s._v(" 类")]),s._v(" "),v("h4",{attrs:{id:"反射机制的执行流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的执行流程"}},[s._v("#")]),s._v(" 反射机制的执行流程")]),s._v(" "),v("img",{staticClass:"zoom",attrs:{src:"https://raw.githubusercontent.com/DishuZ/PicGo/main/all/20240419152550.png",alt:"20240419152550"}})])}),[],!1,null,null,null);a.default=_.exports}}]);